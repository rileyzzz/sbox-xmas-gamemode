//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Screenspace hint shader.";

	DevShader = true;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"

	Feature( F_DISABLE_DEPTH, 0..1, "Disable Depth" );
}

MODES
{
    VrForward();													// Indicates this shader will be used for main rendering
    Depth( "vr_depth_only.vfx" ); 									// Shader that will be used for shadowing and depth prepass
    ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
    ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"

	#define S_TRANSLUCENT 1
	#define BLEND_MODE_ALREADY_SET
	#define DEPTH_STATE_ALREADY_SET
	#define STENCIL_ALREADY_SET
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	//
	// Main
	//
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PixelInput o = ProcessVertex( i );
		// Add your vertex manipulation functions here

		return FinalizeVertex( o );
	}
}

//=========================================================================================================================

PS
{

	//#include "common.fxc"

	//#include "vr_shared_standard_ps_code.fxc"
	//#include "common/pixel.hlsl"

	//#include "math_general.fxc"
	//#include "encoded_normals.fxc"

	RenderState( DepthEnable, F_DISABLE_DEPTH ? false : true );
    // RenderState( DepthWriteEnable, F_DISABLE_DEPTH ? false : true );
    RenderState( DepthWriteEnable, true );

	// RenderState( DepthEnable, false );
    // RenderState( DepthWriteEnable, false );

//     RenderState( StencilEnable, true );

// #if (F_STENCIL_TOP)
// 	RenderState( StencilFunc, NOT_EQUAL );
// 	RenderState( StencilReadMask, 0xFF );
// 	RenderState( StencilWriteMask, 0x00 );
// #else // !F_STENCIL_TOP
//     RenderState( StencilFunc, ALWAYS );
//     RenderState( StencilPassOp, REPLACE );
//     RenderState( StencilWriteMask, 0xFF );
//     RenderState( StencilReadMask, 0x00 );
// #endif // !F_STENCIL_TOP

// 	RenderState( StencilRef, 5 );

    //#include "common/pixel.hlsl"
	//
	// Main
	//

	float g_flUvScale < Default( 1.0 ); Range(0.01, 10.0); UiGroup("Material,10/10"); >;

	CreateInputTexture2D( Texture, Srgb, 8, "", "", "Color", Default3( 1.0, 1.0, 1.0 ) );
	CreateTexture2DInRegister( g_tColor, 0 ) < Channel( RGBA, None( Texture ), Srgb ); OutputFormat( RGBA8888 ); SrgbRead( true ); >;
	TextureAttribute( RepresentativeTexture, g_tColor );

	struct PS_OUTPUT
	{
		float4 vColor : SV_Target0;
		float depth : SV_Depth;
	};


	PS_OUTPUT MainPs( PixelInput i )
	{
		PS_OUTPUT o;

		float2 vScreenUv = g_flUvScale * CalculateViewportUvFromInvSize( i.vPositionSs.xy, g_vInvGBufferSize.xy );
        o.vColor = Tex2D( g_tColor, vScreenUv );
		o.depth = 0.0;
		
		//if(o.vColor.a < 0.3)
			//discard;

		return o;
	}
}